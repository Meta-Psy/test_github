# list_comprehension. Преимущество 1: Создает временную, а не постоянную переменную
#                     Преимущество 2: При этом можно задать дополнительные условия 2 способами
# 1 вариант условия:
# Действия, производимые над элементами включают математические операторы:
squares = [x ** 2 for x in range(1, 100)] # Пишется до for. Позволяет производить действие над каждым элементом существующего списка.
# При этом должна соблюдаться логика для математического оператора:
my = ['2', '33', 'Jordan', 'Pavel']
my2 = [i + '2' for i in my if 'a' in i]

# 2 вариант условия
# Список, с которым будет работать list comprehension можно создать, с помощью команды range
chetniye = [x for x in range(1, 100) if x % 2 == 0]     # Пишется после for - in, при помощи условного оператора
nechetniye = [x for x in range(1, 100) if x % 2 != 0]   # Позволяет выбирать из всего сущестующего списка, только нужные элементы
# Список, с которым будет работать list comprehension можно создать заранее, с помощью переменной
names = ['Pavel', 'Jordan', 'Sasha']
names2 = [name for name in names if 'o' in name]
# Преимущество 2, можно использовать в случае, если нужна исключительно проверка условия в измененном на время списке:
usernames = ['Олег']
while True:
    name = input('Введите имя: ')
    if name.lower() in [i.lower() for i in usernames]:
        print('Имя занято')

# Словари. Более широкое понятие переменной. Здесь приравнивается не одно, а много значений к ключу (название)
my_dict = {'names': ['Jordan', 'Pavel', 'Sasha'], 'user': 'Pasha', 'numbers': (99, 80)}
# ключ    Значения
